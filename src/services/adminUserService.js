/**
 * –ê–¥–º–∏–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å–µ—Ä–≤–∏—Å—ñ
 * 
 * @description –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É “õ—ã–∑–º–µ—Ç—ñ–Ω “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç–µ—Ç—ñ–Ω —Å–µ—Ä–≤–∏—Å.
 * –ê–¥–º–∏–Ω–¥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã “õ–∞—Ä–∞—É, –∂–∞—Å–∞—É, ”©“£–¥–µ—É –∂”ô–Ω–µ –∂–æ—é –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ–Ω “õ–æ–ª–¥–∞–π–¥—ã.
 */

import apiClient from './api';
import { translateError } from '../utils/errorMessages';

const adminUserService = {
  /**
   * –ë–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã –∞–ª—É
   * 
   * @param {Object} params - –°“±—Ä–∞–Ω—ã—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ (—ñ–∑–¥–µ—É, –±–µ—Ç—Ç–µ—É, —Å“Ø–∑—É)
   * @returns {Promise} –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ –±–∞—Ä —É”ô–¥–µ
   */
  getUsers: async (params = {}) => {
    try {
      const queryString = new URLSearchParams(params).toString();
      const response = await apiClient.get(`/users?${queryString}`);
      console.log('Users data received:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error fetching users:', error);
      throw error.response?.data || error;
    }
  },

  /**
   * –ñ–µ–∫–µ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∞–ª—É
   * 
   * @param {string} id - –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã ID
   * @returns {Promise} –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ
   */
  getUser: async (id) => {
    try {
      const response = await apiClient.get(`/users/${id}`);
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },

  /**
   * –ñ–∞“£–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∂–∞—Å–∞—É
   * 
   * @param {Object} userData - –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ
   * @returns {Promise} –ñ–∞—Å–∞–ª“ì–∞–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ
   */
  createUser: async (userData) => {
    try {
      console.log('üìù ADMIN API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userData);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const response = await apiClient.post('/auth/register', userData);
      
      console.log('‚úÖ ADMIN API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå ADMIN API: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      if (error.response) {
        console.error('ADMIN API –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response.status);
        console.error('ADMIN API –ó–∞–≥–æ–ª–æ–≤–∫–∏:', error.response.headers);
        console.error('ADMIN API –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–¥—É
        if (error.response.status === 400 || error.response.status === 409) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
          const { data } = error.response;
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
          if (typeof data === 'string') {
            throw { 
              success: false, 
              message: translateError(data)
            };
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ error –∏–ª–∏ message –≤ –æ—Ç–≤–µ—Ç–µ
          if (data && (data.error || data.message)) {
            const errorMessage = data.error || data.message;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å email
            if (errorMessage.includes('email') || errorMessage.includes('Email')) {
              console.error('üîç ADMIN API: –û—à–∏–±–∫–∞ - Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
              throw { 
                success: false, 
                message: translateError(errorMessage),
                field: 'email' 
              };
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å –ª–æ–≥–∏–Ω–æ–º
            if (errorMessage.includes('–ª–æ–≥–∏–Ω') || errorMessage.includes('username')) {
              console.error('üîç ADMIN API: –û—à–∏–±–∫–∞ - –õ–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
              throw { 
                success: false, 
                message: translateError(errorMessage),
                field: 'username' 
              };
            }
            
            // –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
            throw { 
              success: false, 
              message: translateError(errorMessage)
            };
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ errors –º–∞—Å—Å–∏–≤
          if (data && data.errors && Array.isArray(data.errors)) {
            const errorMessages = data.errors.map(err => 
              translateError(err.msg || err.message || err)
            ).join('. ');
            
            throw { 
              success: false, 
              message: errorMessages,
              errors: data.errors
            };
          }
        }
        
        // –î–ª—è –æ—à–∏–±–æ–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        throw { 
          success: false, 
          message: translateError(error),
          status: error.response.status
        };
      }
      
      // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
      throw { 
        success: false, 
        message: translateError(error)
      };
    }
  },

  /**
   * –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∂–∞“£–∞—Ä—Ç—É
   * 
   * @param {string} id - –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã ID
   * @param {Object} userData - –ñ–∞“£–∞—Ä—Ç—ã–ª–∞—Ç—ã–Ω –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä
   * @returns {Promise} –ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ
   */
  updateUser: async (id, userData) => {
    try {
      console.log('üìù ADMIN API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', id, userData);
      const response = await apiClient.put(`/users/${id}`, userData);
      console.log('‚úÖ ADMIN API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå ADMIN API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      if (error.response) {
        console.error('ADMIN API –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response.status);
        console.error('ADMIN API –ó–∞–≥–æ–ª–æ–≤–∫–∏:', error.response.headers);
        console.error('ADMIN API –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
        
        const { data, status } = error.response;
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Sequelize –æ—à–∏–±–æ–∫
        if (data && data.name === 'SequelizeUniqueConstraintError' && data.errors && data.errors.length > 0) {
          const fieldError = data.errors[0];
          console.error('üîç ADMIN API: –û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Sequelize', fieldError);
          
          if (fieldError.path === 'email') {
            throw { 
              success: false, 
              message: '–ë“±–ª email –±“±—Ä—ã–Ω–Ω–∞–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω. –ë–∞—Å“õ–∞ email –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑.',
              field: 'email',
              originalError: data
            };
          } else if (fieldError.path === 'username') {
            throw { 
              success: false, 
              message: '–ë“±–ª –ª–æ–≥–∏–Ω –±“±—Ä—ã–Ω–Ω–∞–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω. –ë–∞—Å“õ–∞ –ª–æ–≥–∏–Ω —Ç–∞“£–¥–∞“£—ã–∑.',
              field: 'username', 
              originalError: data
            };
          } else {
            throw { 
              success: false, 
              message: `${fieldError.path} ”©—Ä—ñ—Å—ñ –±—ñ—Ä–µ–≥–µ–π –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.`,
              field: fieldError.path,
              originalError: data
            };
          }
        }
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–¥—É
        if (status === 400 || status === 409) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
          if (typeof data === 'string') {
            throw { 
              success: false, 
              message: translateError(data)
            };
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ error –∏–ª–∏ message –≤ –æ—Ç–≤–µ—Ç–µ
          if (data && (data.error || data.message)) {
            const errorMessage = data.error || data.message;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å email
            if (errorMessage.includes('email') || errorMessage.includes('Email')) {
              console.error('üîç ADMIN API: –û—à–∏–±–∫–∞ - Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
              throw { 
                success: false, 
                message: translateError(errorMessage),
                field: 'email' 
              };
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å –ª–æ–≥–∏–Ω–æ–º
            if (errorMessage.includes('–ª–æ–≥–∏–Ω') || errorMessage.includes('username')) {
              console.error('üîç ADMIN API: –û—à–∏–±–∫–∞ - –õ–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
              throw { 
                success: false, 
                message: translateError(errorMessage),
                field: 'username' 
              };
            }
            
            // –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
            throw { 
              success: false, 
              message: translateError(errorMessage)
            };
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ errors –º–∞—Å—Å–∏–≤
          if (data && data.errors && Array.isArray(data.errors)) {
            const errorMessages = data.errors.map(err => 
              translateError(err.msg || err.message || err)
            ).join('. ');
            
            throw { 
              success: false, 
              message: errorMessages,
              errors: data.errors
            };
          }
        }
        
        // –î–ª—è –æ—à–∏–±–æ–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        throw { 
          success: false, 
          message: translateError(error) || '–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∂–∞“£–∞—Ä—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã',
          status: error.response.status
        };
      }
      
      // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
      throw { 
        success: false, 
        message: translateError(error) || '–°–µ—Ä–≤–µ—Ä–≥–µ “õ–æ—Å—ã–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.'
      };
    }
  },

  /**
   * –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∂–æ—é
   * 
   * @param {string} id - –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã ID
   * @returns {Promise} –ñ–æ—é –Ω”ô—Ç–∏–∂–µ—Å—ñ
   */
  deleteUser: async (id) => {
    try {
      console.log('üìù ADMIN API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', id);
      const response = await apiClient.delete(`/users/${id}`);
      console.log('‚úÖ ADMIN API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå ADMIN API: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      if (error.response) {
        console.error('ADMIN API –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response.status);
        console.error('ADMIN API –ó–∞–≥–æ–ª–æ–≤–∫–∏:', error.response.headers);
        console.error('ADMIN API –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        const { data, status } = error.response;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (status === 403) {
          throw { 
            success: false, 
            message: '–ë“±–ª –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∂–æ—é“ì–∞ —Ä“±“õ—Å–∞—Ç—ã“£—ã–∑ –∂–æ“õ'
          };
        }
        
        if (status === 404) {
          throw { 
            success: false, 
            message: '–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã'
          };
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (data) {
          if (typeof data === 'string') {
            throw { 
              success: false, 
              message: translateError(data)
            };
          }
          
          if (data.error || data.message) {
            throw { 
              success: false, 
              message: translateError(data.error || data.message)
            };
          }
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        throw { 
          success: false, 
          message: '–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∂–æ—é –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã', 
          status 
        };
      }
      
      // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      throw { 
        success: false, 
        message: '–°–µ—Ä–≤–µ—Ä–≥–µ “õ–æ—Å—ã–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.'
      };
    }
  },

  /**
   * ”ò–∫—ñ–º—à—ñ –Ω–µ–º–µ—Å–µ —Å—Ç—É–¥–µ–Ω—Ç —Ç—ñ—Ä–∫–µ—É (—Ç–µ–∫ ”ô–∫—ñ–º—à—ñ “Ø—à—ñ–Ω)
   * 
   * @param {Object} userData - –ñ–∞“£–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ
   * @returns {Promise} –ñ–∞—Å–∞–ª“ì–∞–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ
   */
  registerUser: async (userData) => {
    try {
      const response = await apiClient.post('/auth/register', userData);
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },

  /**
   * –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã–Ω –∞–ª—É
   * 
   * @returns {Promise} –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –±–æ–π—ã–Ω—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getUserStats: async () => {
    try {
      const response = await apiClient.get('/users/stats');
      return response.data.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },

  /**
   * “ö“±–ø–∏—è —Å”©–∑–¥—ñ ”ô–∫—ñ–º—à—ñ –∞—Ä“õ—ã–ª—ã ”©–∑–≥–µ—Ä—Ç—É
   * 
   * @param {string} id - –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã ID
   * @param {string} newPassword - –ñ–∞“£–∞ “õ“±–ø–∏—è —Å”©–∑
   * @returns {Promise} ”®–∑–≥–µ—Ä—Ç—É –Ω”ô—Ç–∏–∂–µ—Å—ñ
   */
  resetPassword: async (id, newPassword) => {
    try {
      const response = await apiClient.put(`/users/${id}/reset-password`, { newPassword });
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  }
};

export default adminUserService;