// src/services/baseService.js
import apiClient from './api';

/**
 * –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å –æ–±—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
 */
class BaseService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   * @returns {Object} –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  static getAuthHeaders() {
    const email = sessionStorage.getItem('userEmail') || localStorage.getItem('userEmail');
    const password = sessionStorage.getItem('userPassword') || localStorage.getItem('userPassword');
    
    if (email && password) {
      return {
        'Authorization': 'Basic ' + btoa(`${email}:${password}`)
      };
    }
    
    return {};
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å GET –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
   */
  static async get(url, params = {}) {
    try {
      const response = await apiClient.get(url, {
        params,
        headers: this.getAuthHeaders()
      });
      return response.data;
    } catch (error) {
      console.error(`GET error for ${url}:`, error);
      throw error;
    }
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns {Promise} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
   */
  static async post(url, data = {}) {
    try {
      console.log('üî¥ BaseService.post called:', { url, data });
      console.log('üî¥ Data keys:', Object.keys(data));
      console.log('üî¥ Auth headers:', this.getAuthHeaders());
      
      const response = await apiClient.post(url, data, {
        headers: this.getAuthHeaders()
      });
      
      console.log('üî¥ BaseService.post response:', response.data);
      return response.data;
    } catch (error) {
      console.error(`POST error for ${url}:`, error);
      console.error('üî¥ Error response:', error.response?.data);
      console.error('üî¥ Error status:', error.response?.status);
      throw error;
    }
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å PUT –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns {Promise} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
   */
  static async put(url, data = {}) {
    try {
      const response = await apiClient.put(url, data, {
        headers: this.getAuthHeaders()
      });
      return response.data;
    } catch (error) {
      console.error(`PUT error for ${url}:`, error);
      throw error;
    }
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å DELETE –∑–∞–ø—Ä–æ—Å
   * @param {string} url - URL –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
   */
  static async delete(url) {
    try {
      const response = await apiClient.delete(url, {
        headers: this.getAuthHeaders()
      });
      return response.data;
    } catch (error) {
      console.error(`DELETE error for ${url}:`, error);
      throw error;
    }
  }
}

export default BaseService;