import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Table, 
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  IconButton,
  TablePagination,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Container,
  TextField,
  MenuItem,
  Grid,
  Chip,
  FormControl,
  InputLabel,
  Select,
  Alert,
  AlertTitle,
  CircularProgress,
  Divider
} from '@mui/material';
import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, Image as ImageIcon, Warning as WarningIcon } from '@mui/icons-material';
import adminBookService from '../../services/adminBookService';
import PageHeader from '../../components/common/PageHeader';
import BookCoverPreview from '../../components/admin/BookCoverPreview';
import { useToast } from '../../context/ToastContext';
import { translateError } from '../../utils/errorMessages';

const BooksPage = () => {
  const [books, setBooks] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
  const [selectedBook, setSelectedBook] = useState(null);
  const [openEditDialog, setOpenEditDialog] = useState(false);
  const [openAddDialog, setOpenAddDialog] = useState(false);
  const [openCoverDialog, setOpenCoverDialog] = useState(false);
  const [coverFile, setCoverFile] = useState(null);
  const [formError, setFormError] = useState('');
  const [coverError, setCoverError] = useState('');
  const [addBookLoading, setAddBookLoading] = useState(false);
  const [editBookLoading, setEditBookLoading] = useState(false);
  const [deleteBookLoading, setDeleteBookLoading] = useState(false);
  const [uploadCoverLoading, setUploadCoverLoading] = useState(false);
  const { success, error: showError } = useToast();
  const [formData, setFormData] = useState({
    title: '',
    author: '',
    description: '',
    publisher: '',
    publishYear: '',
    totalCopies: 1,
    availableCopies: 1,
    categoryId: '',
    language: '–ö–∞–∑–∞—Ö—Å–∫–∏–π'
  });

  const [fieldErrors, setFieldErrors] = useState({});
  const [newBookCoverFile, setNewBookCoverFile] = useState(null);
  const [newBookCoverError, setNewBookCoverError] = useState('');
  const [uploadingNewBookCover, setUploadingNewBookCover] = useState(false);

  const [editBookCoverFile, setEditBookCoverFile] = useState(null);
  const [editBookCoverError, setEditBookCoverError] = useState('');
  const [uploadingEditBookCover, setUploadingEditBookCover] = useState(false);

  // –ö—ñ—Ç–∞–ø—Ç–∞—Ä –º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–Ω—Ç–∞–∂–¥–∞–ª“ì–∞–Ω –∫–µ–∑–¥–µ
  useEffect(() => {
    fetchBooks();
    fetchCategories();
  }, []);

  // –ö—ñ—Ç–∞–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∂“Ø–∫—Ç–µ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
  const fetchBooks = async () => {
    try {
      setLoading(true);
      const response = await adminBookService.getBooks();
      if (response && response.data) {
        // –î–æ–±–∞–≤–ª—è–µ–º coverUrl –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
        const booksWithCovers = response.data.map(book => ({
          ...book,
          coverUrl: book.cover || book.coverUrl || 'https://via.placeholder.com/50x75?text=No+Cover'
        }));
        setBooks(booksWithCovers);
      }
    } catch (error) {
      console.error('–ö—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:', error);
      showError('–ö—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã');
    } finally {
      setLoading(false);
    }
  };

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
  const fetchCategories = async () => {
    try {
      const response = await adminBookService.getCategories();
      if (response && response.data) {
        setCategories(response.data);
      }
    } catch (error) {
      console.error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:', error);
      showError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleFormChange = (e) => {
    const { name, value } = e.target;
    
    // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ (–±–µ–∑ –±—É–∫–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
    if (name === 'publishYear' || name === 'totalCopies' || name === 'availableCopies') {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
      if (value === '' || /^\d+$/.test(value)) {
        setFormData(prev => ({
          ...prev,
          [name]: value
        }));
      }
      // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥)
    } else {
      // –î–ª—è –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  // –ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É ”©“£–¥–µ—É—à—ñ—Å—ñ
  const handleCoverChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å. 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setCoverError('–§–∞–π–ª ”©–ª—à–µ–º—ñ 5MB-–¥–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        setCoverError('–¢–µ–∫ —Å—É—Ä–µ—Ç —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É–≥–µ —Ä“±“õ—Å–∞—Ç –µ—Ç—ñ–ª–≥–µ–Ω (JPEG, PNG, GIF)');
        return;
      }
      
      setCoverError(''); // –°–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      setCoverFile(file);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
  const handleNewBookCoverChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å. 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setNewBookCoverError('–§–∞–π–ª ”©–ª—à–µ–º—ñ 5MB-–¥–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        setNewBookCoverError('–¢–µ–∫ —Å—É—Ä–µ—Ç —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É–≥–µ —Ä“±“õ—Å–∞—Ç –µ—Ç—ñ–ª–≥–µ–Ω (JPEG, PNG, GIF)');
        return;
      }
      
      setNewBookCoverError(''); // –°–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      setNewBookCoverFile(file);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∫–Ω–∏–≥–∏
  const handleEditBookCoverChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å. 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setEditBookCoverError('–§–∞–π–ª ”©–ª—à–µ–º—ñ 5MB-–¥–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        setEditBookCoverError('–¢–µ–∫ —Å—É—Ä–µ—Ç —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É–≥–µ —Ä“±“õ—Å–∞—Ç –µ—Ç—ñ–ª–≥–µ–Ω (JPEG, PNG, GIF)');
        return;
      }
      
      setEditBookCoverError(''); // –°–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      setEditBookCoverFile(file);
    }
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    setFormData({
      title: '',
      author: '',
      description: '',
      publisher: '',
      publishYear: '',
      totalCopies: 1,
      availableCopies: 1,
      categoryId: '',
      language: '–ö–∞–∑–∞—Ö—Å–∫–∏–π'
    });
    setSelectedBook(null);
    setFormError('');
    setFieldErrors({});
    setNewBookCoverFile(null);
    setNewBookCoverError('');
    setEditBookCoverFile(null);
    setEditBookCoverError('');
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏
  const openAddBookDialog = () => {
    resetForm();
    setOpenAddDialog(true);
  };

  // –ö—ñ—Ç–∞–ø “õ–æ—Å—É ”©“£–¥–µ—É—à—ñ—Å—ñ
  const handleAddBook = async () => {
    try {
      setFormError('');
      setFieldErrors({});
      setAddBookLoading(true);
      
      console.log('üîç –ö—ñ—Ç–∞–ø “õ“±—Ä—É –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É:', formData);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const requiredFields = [
        { field: 'title', label: '–ö—ñ—Ç–∞–ø—Ç—ã“£ –∞—Ç–∞—É—ã' },
        { field: 'author', label: '–ê–≤—Ç–æ—Ä' },
        { field: 'categoryId', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' },
        { field: 'description', label: '–°–∏–ø–∞—Ç—Ç–∞–º–∞' },
        { field: 'publishYear', label: '–ë–∞—Å—ã–ª—ã–º –∂—ã–ª—ã' },
        { field: 'language', label: '–¢—ñ–ª' }
      ];
      
      const errors = {};
      let hasErrors = false;
      
      requiredFields.forEach(({ field, label }) => {
        if (!formData[field] || formData[field] === '') {
          errors[field] = `${label} –º—ñ–Ω–¥–µ—Ç—Ç—ñ ”©—Ä—ñ—Å`;
          hasErrors = true;
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
      if (formData.publishYear && isNaN(parseInt(formData.publishYear))) {
        errors.publishYear = '–ë–∞—Å—ã–ª—ã–º –∂—ã–ª—ã —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫';
        hasErrors = true;
      }
      
      if (isNaN(parseInt(formData.totalCopies)) || parseInt(formData.totalCopies) < 0) {
        errors.totalCopies = '–î–∞–Ω–∞–ª–∞—Ä —Å–∞–Ω—ã –æ“£ —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫';
        hasErrors = true;
      }
      
      if (isNaN(parseInt(formData.availableCopies)) || parseInt(formData.availableCopies) < 0) {
        errors.availableCopies = '“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä —Å–∞–Ω—ã –æ“£ —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫';
        hasErrors = true;
      }
      
      if (parseInt(formData.availableCopies) > parseInt(formData.totalCopies)) {
        errors.availableCopies = '“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä —Å–∞–Ω—ã –∂–∞–ª–ø—ã —Å–∞–Ω–Ω–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫';
        hasErrors = true;
      }
      
      if (hasErrors) {
        console.error('‚ùå –§–æ—Ä–º–∞ “õ–∞—Ç–µ–ª–µ—Ä—ñ —Ç–∞–±—ã–ª–¥—ã:', errors);
        setFieldErrors(errors);
        setFormError('–§–æ—Ä–º–∞–¥–∞“ì—ã “õ–∞—Ç–µ–ª–µ—Ä–¥—ñ —Ç“Ø–∑–µ—Ç—ñ“£—ñ–∑');
        return;
      }
      
      console.log('‚úÖ –§–æ—Ä–º–∞ —Ç–µ–∫—Å–µ—Ä—É–¥–µ–Ω ”©—Ç—Ç—ñ, —Å–µ—Ä–≤–µ—Ä–≥–µ —Å“±—Ä–∞–Ω—ã—Å –∂—ñ–±–µ—Ä—É...');
      
      const response = await adminBookService.createBook(formData);
      
      if (response && response.success) {
        const newBookId = response.data.id;
        console.log(`‚úÖ –ö—ñ—Ç–∞–ø —Å”ô—Ç—Ç—ñ “õ“±—Ä—ã–ª–¥—ã, ID: ${newBookId}`);
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–±–ª–æ–∂–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë (–≤—Å–µ–≥–¥–∞ –ª–æ–∫–∞–ª—å–Ω–æ)
        if (newBookCoverFile) {
          console.log(`üì§ ID: ${newBookId} –∫—ñ—Ç–∞–±—ã–Ω–∞ –º“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É –±–∞—Å—Ç–∞–ª–¥—ã`);
          setUploadingNewBookCover(true);
          try {
            const coverResponse = await adminBookService.uploadBookCover(newBookId, newBookCoverFile);
            if (!coverResponse.success) {
              console.error('‚ùå –ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:', coverResponse.message);
              showError(`–ö—ñ—Ç–∞–ø —Å”ô—Ç—Ç—ñ “õ“±—Ä—ã–ª–¥—ã, –±—ñ—Ä–∞“õ –º“±“õ–∞–±–∞–Ω—ã –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: ${coverResponse.message}`);
            } else {
              console.log('‚úÖ –ú“±“õ–∞–±–∞ —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ');
            }
          } catch (coverError) {
            console.error('‚ùå –ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:', coverError);
            showError('–ö—ñ—Ç–∞–ø “õ“±—Ä—ã–ª–¥—ã, –±—ñ—Ä–∞“õ –º“±“õ–∞–±–∞–Ω—ã –∂“Ø–∫—Ç–µ—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã');
          } finally {
            setUploadingNewBookCover(false);
          }
        }
        
        success(`"${formData.title}" –∫—ñ—Ç–∞–±—ã —Å”ô—Ç—Ç—ñ “õ“±—Ä—ã–ª–¥—ã`);
        fetchBooks();
        setOpenAddDialog(false);
        resetForm();
      } else if (response && !response.success) {
        console.error('‚ùå –ö—ñ—Ç–∞–ø “õ“±—Ä—É “õ–∞—Ç–µ—Å—ñ:', response.message);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (response.validationErrors && Array.isArray(response.validationErrors)) {
          const serverErrors = {};
          response.validationErrors.forEach(error => {
            if (error.field) {
              serverErrors[error.field] = error.message || error.msg;
            }
          });
          console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏—è “õ–∞—Ç–µ–ª–µ—Ä—ñ:', serverErrors);
          setFieldErrors(serverErrors);
        }
        
        setFormError(response.message || '–ö—ñ—Ç–∞–ø “õ“±—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã');
      }
    } catch (error) {
      console.error('‚ùå –ö—ñ—Ç–∞–ø “õ“±—Ä—É –∫–µ–∑—ñ–Ω–¥–µ –∫“Ø—Ç–ø–µ–≥–µ–Ω “õ–∞—Ç–µ:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
      if (error.message) {
        setFormError(error.message);
      } else if (error.validationErrors) {
        const serverErrors = {};
        error.validationErrors.forEach(err => {
          if (err.field) {
            serverErrors[err.field] = err.message || err.msg;
          }
        });
        setFieldErrors(serverErrors);
        setFormError('–ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑. –ö–µ–π–±—ñ—Ä ”©—Ä—ñ—Å—Ç–µ—Ä –∂–∞—Ä–∞–º—Å—ã–∑.');
      } else {
        setFormError('–ö—ñ—Ç–∞–ø “õ“±—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.');
      }
      
      showError('–ö—ñ—Ç–∞–ø—Ç—ã “õ“±—Ä—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã');
    } finally {
      setAddBookLoading(false);
    }
  };

  // –ö—ñ—Ç–∞–ø—Ç—ã ”©“£–¥–µ—É ”©“£–¥–µ—É—à—ñ—Å—ñ
  const handleEditBook = async () => {
    try {
      if (!selectedBook) return;
      
      setFormError('');
      setFieldErrors({});
      setEditBookLoading(true);
      
      console.log('üîç –ö—ñ—Ç–∞–ø ”©“£–¥–µ—É –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É:', formData);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      const requiredFields = [
        { field: 'title', label: '–ö—ñ—Ç–∞–ø—Ç—ã“£ –∞—Ç–∞—É—ã' },
        { field: 'author', label: '–ê–≤—Ç–æ—Ä' },
        { field: 'categoryId', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' },
        { field: 'description', label: '–°–∏–ø–∞—Ç—Ç–∞–º–∞' },
        { field: 'publishYear', label: '–ë–∞—Å—ã–ª—ã–º –∂—ã–ª—ã' },
        { field: 'language', label: '–¢—ñ–ª' }
      ];
      
      const errors = {};
      let hasErrors = false;
      
      requiredFields.forEach(({ field, label }) => {
        if (!formData[field] || formData[field] === '') {
          errors[field] = `${label} –º—ñ–Ω–¥–µ—Ç—Ç—ñ ”©—Ä—ñ—Å`;
          hasErrors = true;
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
      if (formData.publishYear && isNaN(parseInt(formData.publishYear))) {
        errors.publishYear = '–ë–∞—Å—ã–ª—ã–º –∂—ã–ª—ã —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫';
        hasErrors = true;
      }
      
      if (isNaN(parseInt(formData.totalCopies)) || parseInt(formData.totalCopies) < 0) {
        errors.totalCopies = '–î–∞–Ω–∞–ª–∞—Ä —Å–∞–Ω—ã –æ“£ —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫';
        hasErrors = true;
      }
      
      if (isNaN(parseInt(formData.availableCopies)) || parseInt(formData.availableCopies) < 0) {
        errors.availableCopies = '“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä —Å–∞–Ω—ã –æ“£ —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫';
        hasErrors = true;
      }
      
      if (parseInt(formData.availableCopies) > parseInt(formData.totalCopies)) {
        errors.availableCopies = '“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä —Å–∞–Ω—ã –∂–∞–ª–ø—ã —Å–∞–Ω–Ω–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫';
        hasErrors = true;
      }
      
      if (hasErrors) {
        console.error('‚ùå –§–æ—Ä–º–∞ “õ–∞—Ç–µ–ª–µ—Ä—ñ —Ç–∞–±—ã–ª–¥—ã:', errors);
        setFieldErrors(errors);
        setFormError('–§–æ—Ä–º–∞–¥–∞“ì—ã “õ–∞—Ç–µ–ª–µ—Ä–¥—ñ —Ç“Ø–∑–µ—Ç—ñ“£—ñ–∑');
        return;
      }
      
      console.log('‚úÖ –§–æ—Ä–º–∞ —Ç–µ–∫—Å–µ—Ä—É–¥–µ–Ω ”©—Ç—Ç—ñ, —Å–µ—Ä–≤–µ—Ä–≥–µ —Å“±—Ä–∞–Ω—ã—Å –∂—ñ–±–µ—Ä—É...');
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
      const response = await adminBookService.updateBook(selectedBook.id, formData);
      
      if (response && response.success) {
        console.log(`‚úÖ –ö—ñ—Ç–∞–ø —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã, ID: ${selectedBook.id}`);
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –æ–±–ª–æ–∂–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë (–≤—Å–µ–≥–¥–∞ –ª–æ–∫–∞–ª—å–Ω–æ)
        if (editBookCoverFile) {
          console.log(`üì§ ID: ${selectedBook.id} –∫—ñ—Ç–∞–±—ã–Ω–∞ –∂–∞“£–∞ –º“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É –±–∞—Å—Ç–∞–ª–¥—ã`);
          setUploadingEditBookCover(true);
          try {
            const coverResponse = await adminBookService.uploadBookCover(selectedBook.id, editBookCoverFile);
            if (!coverResponse.success) {
              console.error('‚ùå –ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:', coverResponse.message);
              showError(`–ö—ñ—Ç–∞–ø —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã, –±—ñ—Ä–∞“õ –º“±“õ–∞–±–∞–Ω—ã –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: ${coverResponse.message}`);
            } else {
              console.log('‚úÖ –ñ–∞“£–∞ –º“±“õ–∞–±–∞ —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ');
            }
          } catch (coverError) {
            console.error('‚ùå –ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:', coverError);
            showError('–ö—ñ—Ç–∞–ø –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã, –±—ñ—Ä–∞“õ –º“±“õ–∞–±–∞–Ω—ã –∂“Ø–∫—Ç–µ—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã');
          } finally {
            setUploadingEditBookCover(false);
          }
        }
        
        success(`"${formData.title}" –∫—ñ—Ç–∞–±—ã —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã`);
        fetchBooks();
        setOpenEditDialog(false);
        resetForm();
      } else if (response && !response.success) {
        console.error('‚ùå –ö—ñ—Ç–∞–ø –∂–∞“£–∞—Ä—Ç—É “õ–∞—Ç–µ—Å—ñ:', response.message);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (response.validationErrors && Array.isArray(response.validationErrors)) {
          const serverErrors = {};
          response.validationErrors.forEach(error => {
            if (error.field) {
              serverErrors[error.field] = error.message || error.msg;
            }
          });
          console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏—è “õ–∞—Ç–µ–ª–µ—Ä—ñ:', serverErrors);
          setFieldErrors(serverErrors);
        }
        
        setFormError(response.message || '–ö—ñ—Ç–∞–ø –∂–∞“£–∞—Ä—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã');
      }
    } catch (error) {
      console.error('‚ùå –ö—ñ—Ç–∞–ø—Ç—ã –∂–∞“£–∞—Ä—Ç—É –∫–µ–∑—ñ–Ω–¥–µ –∫“Ø—Ç–ø–µ–≥–µ–Ω “õ–∞—Ç–µ:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
      if (error.message) {
        setFormError(error.message);
      } else if (error.validationErrors) {
        const serverErrors = {};
        error.validationErrors.forEach(err => {
          if (err.field) {
            serverErrors[err.field] = err.message || err.msg;
          }
        });
        setFieldErrors(serverErrors);
        setFormError('–ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑. –ö–µ–π–±—ñ—Ä ”©—Ä—ñ—Å—Ç–µ—Ä –∂–∞—Ä–∞–º—Å—ã–∑.');
      } else {
        setFormError('–ö—ñ—Ç–∞–ø—Ç—ã –∂–∞“£–∞—Ä—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.');
      }
      
      showError('–ö—ñ—Ç–∞–ø—Ç—ã –∂–∞“£–∞—Ä—Ç—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã');
    } finally {
      setEditBookLoading(false);
    }
  };

  // –ö—ñ—Ç–∞–ø—Ç—ã –∂–æ—é ”©“£–¥–µ—É—à—ñ—Å—ñ
  const handleDeleteBook = async () => {
    try {
      if (!selectedBook) return;
      
      setDeleteBookLoading(true);
      const response = await adminBookService.deleteBook(selectedBook.id);
      
      if (response && response.success) {
        success(`"${selectedBook.title}" –∫—ñ—Ç–∞–±—ã —Å”ô—Ç—Ç—ñ –∂–æ–π—ã–ª–¥—ã`);
        fetchBooks();
        setOpenDeleteDialog(false);
      }
    } catch (error) {
      console.error('–ö—ñ—Ç–∞–ø—Ç—ã –∂–æ—é “õ–∞—Ç–µ—Å—ñ:', error);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = '–ö—ñ—Ç–∞–ø—Ç—ã –∂–æ—é –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã';
      
      if (error.message) {
        errorMessage = error.message;
      }
      
      showError(errorMessage);
    } finally {
      setDeleteBookLoading(false);
    }
  };

  // –ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É ”©“£–¥–µ—É—à—ñ—Å—ñ
  const handleUploadCover = async () => {
    try {
      if (!selectedBook || !coverFile) {
        setCoverError('–ú“±“õ–∞–±–∞ —Ñ–∞–π–ª—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑');
        return;
      }
      
      setCoverError('');
      setUploadCoverLoading(true);
      
      const response = await adminBookService.uploadBookCover(selectedBook.id, coverFile);
      
      if (response && response.success) {
        success(`"${selectedBook.title}" –∫—ñ—Ç–∞–±—ã–Ω—ã“£ –º“±“õ–∞–±–∞—Å—ã —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ`);
        fetchBooks();
        setOpenCoverDialog(false);
        setCoverFile(null);
      } else if (!response.success) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        setCoverError(response.message || '–ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã');
      }
    } catch (error) {
      console.error('‚ùå –ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:', error);
      
      // –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏
      if (error.message) {
        setCoverError(error.message);
      } else if (error.response && error.response.status === 400) {
        setCoverError('–ñ–∞—Ä–∞–º—Å—ã–∑ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ–º–µ—Å–µ ”©–ª—à–µ–º—ñ. JPG, PNG –Ω–µ–º–µ—Å–µ GIF —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞“ì—ã 5MB-–¥–∞–Ω –∞—Å–ø–∞–π—Ç—ã–Ω —Å—É—Ä–µ—Ç –∂“Ø–∫—Ç–µ“£—ñ–∑.');
      } else {
        setCoverError('–ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.');
      }
      
      showError('–ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã');
    } finally {
      setUploadCoverLoading(false);
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const openEditBookDialog = (book) => {
    // –î–æ–±–∞–≤–ª—è–µ–º URL –æ–±–ª–æ–∂–∫–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
    setSelectedBook({
      ...book,
      coverUrl: getCoverUrl(book)
    });
    setFormData({
      title: book.title,
      author: book.author,
      description: book.description || '',
      publisher: book.publisher,
      publishYear: book.publicationYear || book.publishYear,
      totalCopies: book.totalCopies,
      availableCopies: book.availableCopies,
      categoryId: book.categoryId,
      language: book.language
    });
    setEditBookCoverFile(null);
    setEditBookCoverError('');
    setFormError('');
    setOpenEditDialog(true);
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏
  const openUploadCoverDialog = (book) => {
    // –î–æ–±–∞–≤–ª—è–µ–º URL –æ–±–ª–æ–∂–∫–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
    setSelectedBook({
      ...book,
      coverUrl: getCoverUrl(book)
    });
    setCoverError('');
    setCoverFile(null);
    setOpenCoverDialog(true);
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const openDeleteBookDialog = (book) => {
    setSelectedBook(book);
    setOpenDeleteDialog(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –æ–±–ª–æ–∂–∫–∏
  const getCoverUrl = (book) => {
    // –ï—Å–ª–∏ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å cover –∏ —ç—Ç–æ URL (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http –∏–ª–∏ /uploads)
    if (book.cover) {
      if (book.cover.startsWith('/uploads')) {
        return `${window.location.protocol}//${window.location.host.replace(/:\d+/, ':5001')}${book.cover}`;
      }
      return book.cover;
    } else if (book.coverUrl) {
      if (book.coverUrl.startsWith('/uploads')) {
        return `${window.location.protocol}//${window.location.host.replace(/:\d+/, ':5001')}${book.coverUrl}`;
      }
      return book.coverUrl;
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–ª–æ–∂–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return 'https://via.placeholder.com/50x75?text=No+Cover';
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏
  const renderCoverDialog = () => (
    <Dialog open={openCoverDialog} onClose={() => !uploadCoverLoading && setOpenCoverDialog(false)} maxWidth="sm" fullWidth>
      <DialogTitle>–ö—ñ—Ç–∞–ø –º“±“õ–∞–±–∞—Å—ã–Ω –∂“Ø–∫—Ç–µ—É</DialogTitle>
      <DialogContent>
        {coverError && (
          <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
            <AlertTitle>–ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ</AlertTitle>
            {coverError}
          </Alert>
        )}
        
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} sm={5}>
            <BookCoverPreview 
              file={coverFile} 
              imageUrl={selectedBook?.coverUrl} 
              title={selectedBook?.title || '–ö—ñ—Ç–∞–ø'} 
            />
          </Grid>
          
          <Grid item xs={12} sm={7}>
            <Typography variant="body2" gutterBottom>
              –ö—ñ—Ç–∞–ø—Ç—ã“£ –º“±“õ–∞–±–∞—Å—ã “Ø—à—ñ–Ω —Å—É—Ä–µ—Ç —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ“£—ñ–∑. JPG, PNG –Ω–µ–º–µ—Å–µ GIF —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫, ”©–ª—à–µ–º—ñ 5MB-–¥–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫.
            </Typography>
            
            <input
              accept="image/*"
              id="contained-button-file"
              type="file"
              onChange={handleCoverChange}
              style={{ display: 'none' }}
              disabled={uploadCoverLoading}
            />
            <label htmlFor="contained-button-file">
              <Button 
                variant="contained" 
                component="span"
                disabled={uploadCoverLoading}
                fullWidth
                sx={{ mt: 2 }}
              >
                –§–∞–π–ª–¥—ã —Ç–∞“£–¥–∞—É
              </Button>
            </label>
            
            {coverFile && (
              <Box sx={{ mt: 2 }}>
                <Typography variant="body2">
                  –¢–∞“£–¥–∞–ª“ì–∞–Ω —Ñ–∞–π–ª: {coverFile.name} ({(coverFile.size / 1024).toFixed(2)} KB)
                </Typography>
              </Box>
            )}
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions>
        <Button 
          onClick={() => setOpenCoverDialog(false)}
          disabled={uploadCoverLoading}
        >
          –ë–∞—Å —Ç–∞—Ä—Ç—É
        </Button>
        <Button 
          onClick={handleUploadCover} 
          variant="contained" 
          color="primary"
          disabled={!coverFile || uploadCoverLoading}
        >
          {uploadCoverLoading ? <CircularProgress size={24} /> : '–ñ“Ø–∫—Ç–µ—É'}
        </Button>
      </DialogActions>
    </Dialog>
  );

  return (
    <Container maxWidth="lg">
      <PageHeader 
        title="–ö—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É" 
        subtitle="–ö—ñ—Ç–∞–ø—Ö–∞–Ω–∞–¥–∞“ì—ã –∫—ñ—Ç–∞–ø—Ç–∞—Ä–¥—ã “õ–∞—Ä–∞—É, “õ–æ—Å—É, ”©“£–¥–µ—É –∂”ô–Ω–µ –∂–æ—é"
      />

      <Paper elevation={3} sx={{ mb: 4, p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h6">–ö—ñ—Ç–∞–ø—Ç–∞—Ä –∫–∞—Ç–∞–ª–æ–≥—ã</Typography>
          <Button 
            variant="contained" 
            color="primary" 
            startIcon={<AddIcon />}
            onClick={openAddBookDialog}
          >
            –ö—ñ—Ç–∞–ø “õ–æ—Å—É
          </Button>
        </Box>

        <TableContainer>
          <Table sx={{ minWidth: 650 }} aria-label="books table">
            <TableHead>
              <TableRow>
                <TableCell>ID</TableCell>
                <TableCell>–ú“±“õ–∞–±–∞</TableCell>
                <TableCell>–ê—Ç–∞—É—ã</TableCell>
                <TableCell>–ê–≤—Ç–æ—Ä</TableCell>
                <TableCell>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableCell>
                <TableCell>–î–∞–Ω–∞–ª–∞—Ä—ã</TableCell>
                <TableCell>“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ</TableCell>
                <TableCell>”ò—Ä–µ–∫–µ—Ç—Ç–µ—Ä</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={8} align="center">–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...</TableCell>
                </TableRow>
              ) : books.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={8} align="center">–ö—ñ—Ç–∞–ø—Ç–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã</TableCell>
                </TableRow>
              ) : (
                books
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((book) => (
                    <TableRow key={book.id}>
                      <TableCell>{book.id}</TableCell>
                      <TableCell>
                        <Box 
                          component="img" 
                          src={getCoverUrl(book)} 
                          alt={book.title}
                          sx={{ width: 50, height: 75, objectFit: 'cover' }}
                        />
                      </TableCell>
                      <TableCell>{book.title}</TableCell>
                      <TableCell>{book.author}</TableCell>
                      <TableCell>{book.category?.name}</TableCell>
                      <TableCell>{book.totalCopies}</TableCell>
                      <TableCell>
                        <Chip 
                          label={book.availableCopies} 
                          color={book.availableCopies > 0 ? 'success' : 'error'} 
                          size="small"
                        />
                      </TableCell>
                      <TableCell>
                        <IconButton 
                          aria-label="upload cover" 
                          color="secondary"
                          onClick={() => openUploadCoverDialog(book)}
                        >
                          <ImageIcon />
                        </IconButton>
                        <IconButton 
                          aria-label="edit" 
                          color="primary"
                          onClick={() => openEditBookDialog(book)}
                        >
                          <EditIcon />
                        </IconButton>
                        <IconButton 
                          aria-label="delete" 
                          color="error"
                          onClick={() => openDeleteBookDialog(book)}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
        
        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={books.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </Paper>

      {/* –ö—ñ—Ç–∞–ø “õ–æ—Å—É –¥–∏–∞–ª–æ–≥—ã */}
      <Dialog open={openAddDialog} onClose={() => !addBookLoading && setOpenAddDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Typography variant="h6">–ö—ñ—Ç–∞–ø “õ–æ—Å—É</Typography>
            {addBookLoading && <CircularProgress size={24} sx={{ ml: 2 }} />}
          </Box>
        </DialogTitle>
        <DialogContent>
          {formError && (
            <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
              <AlertTitle>–ö—ñ—Ç–∞–ø “õ“±—Ä—É “õ–∞—Ç–µ—Å—ñ</AlertTitle>
              {formError}
            </Alert>
          )}
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ê—Ç–∞—É—ã"
                name="title"
                value={formData.title}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.title}
                helperText={fieldErrors.title || ''}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ê–≤—Ç–æ—Ä—ã"
                name="author"
                value={formData.author}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.author}
                helperText={fieldErrors.author || ''}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="–°–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã"
                name="description"
                value={formData.description}
                onChange={handleFormChange}
                multiline
                rows={3}
                required
                error={!!fieldErrors.description}
                helperText={fieldErrors.description || '–ö—ñ—Ç–∞–ø—Ç—ã“£ “õ—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑'}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ë–∞—Å–ø–∞"
                name="publisher"
                value={formData.publisher}
                onChange={handleFormChange}
                error={!!fieldErrors.publisher}
                helperText={fieldErrors.publisher || '–ö—ñ—Ç–∞–ø –±–∞—Å–ø–∞—Å—ã (–º—ñ–Ω–¥–µ—Ç—Ç—ñ –µ–º–µ—Å)'}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ë–∞—Å—ã–ª—ã–º –∂—ã–ª—ã"
                name="publishYear"
                type="text"
                value={formData.publishYear}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.publishYear}
                helperText={fieldErrors.publishYear || '–ú—ã—Å–∞–ª—ã: 2023 (—Ç–µ–∫ —Å–∞–Ω–¥–∞—Ä–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑)'}
                inputProps={{
                  inputMode: 'numeric',
                  pattern: '[0-9]*',
                }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth error={!!fieldErrors.categoryId}>
                <InputLabel id="category-select-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</InputLabel>
                <Select
                  labelId="category-select-label"
                  label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                  name="categoryId"
                  value={formData.categoryId}
                  onChange={handleFormChange}
                  required
                >
                  {categories.map(category => (
                    <MenuItem key={category.id} value={category.id}>
                      {category.name}
                    </MenuItem>
                  ))}
                </Select>
                {fieldErrors.categoryId && (
                  <Typography color="error" variant="caption" sx={{ mt: 1, ml: 2 }}>
                    {fieldErrors.categoryId}
                  </Typography>
                )}
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth error={!!fieldErrors.language}>
                <InputLabel id="language-select-label">–¢—ñ–ª—ñ</InputLabel>
                <Select
                  labelId="language-select-label"
                  label="–¢—ñ–ª—ñ"
                  name="language"
                  value={formData.language}
                  onChange={handleFormChange}
                  required
                >
                  <MenuItem value="–ö–∞–∑–∞—Ö—Å–∫–∏–π">“ö–∞–∑–∞“õ—à–∞</MenuItem>
                  <MenuItem value="–†—É—Å—Å–∫–∏–π">–û—Ä—ã—Å—à–∞</MenuItem>
                  <MenuItem value="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π">–ê“ì—ã–ª—à—ã–Ω—à–∞</MenuItem>
                </Select>
                {fieldErrors.language && (
                  <Typography color="error" variant="caption" sx={{ mt: 1, ml: 2 }}>
                    {fieldErrors.language}
                  </Typography>
                )}
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                label="–ë–∞—Ä–ª—ã“õ –¥–∞–Ω–∞–ª–∞—Ä—ã"
                name="totalCopies"
                type="text"
                value={formData.totalCopies}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.totalCopies}
                helperText={fieldErrors.totalCopies || '–ö—ñ—Ç–∞–ø—Ç—ã“£ –∂–∞–ª–ø—ã –¥–∞–Ω–∞—Å—ã (—Ç–µ–∫ —Å–∞–Ω–¥–∞—Ä)'}
                inputProps={{
                  inputMode: 'numeric',
                  pattern: '[0-9]*',
                  min: "0"
                }}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                label="“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä—ã"
                name="availableCopies"
                type="text"
                value={formData.availableCopies}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.availableCopies}
                helperText={fieldErrors.availableCopies || '“ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä (—Ç–µ–∫ —Å–∞–Ω–¥–∞—Ä)'}
                inputProps={{
                  inputMode: 'numeric',
                  pattern: '[0-9]*',
                  min: "0"
                }}
              />
            </Grid>
            
            {/* –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 'bold' }}>
                –ö—ñ—Ç–∞–ø –º“±“õ–∞–±–∞—Å—ã
              </Typography>
              
              {newBookCoverError && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {newBookCoverError}
                </Alert>
              )}
              
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={4}>
                  <BookCoverPreview 
                    file={newBookCoverFile} 
                    title={formData.title || '–ñ–∞“£–∞ –∫—ñ—Ç–∞–ø'} 
                  />
                </Grid>
                
                <Grid item xs={12} sm={8}>
                  <Box sx={{ mb: 3 }}>
                    <Typography variant="body2" gutterBottom>
                      –ö—ñ—Ç–∞–ø—Ç—ã“£ –º“±“õ–∞–±–∞—Å—ã “Ø—à—ñ–Ω —Å—É—Ä–µ—Ç —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ“£—ñ–∑. JPG, PNG –Ω–µ–º–µ—Å–µ GIF —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫, ”©–ª—à–µ–º—ñ 5MB-–¥–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫.
                    </Typography>
                    
                    <input
                      accept="image/*"
                      id="new-book-cover-upload"
                      type="file"
                      onChange={handleNewBookCoverChange}
                      style={{ display: 'none' }}
                    />
                    <label htmlFor="new-book-cover-upload">
                      <Button
                        variant="outlined"
                        component="span"
                        startIcon={<ImageIcon />}
                        disabled={addBookLoading}
                        fullWidth
                        sx={{ mt: 1 }}
                      >
                        –ú“±“õ–∞–±–∞ —Ç–∞“£–¥–∞—É
                      </Button>
                    </label>
                    
                    {newBookCoverFile && (
                      <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <Typography variant="caption">
                          {newBookCoverFile.name} ({(newBookCoverFile.size / 1024).toFixed(2)} KB)
                        </Typography>
                        <IconButton 
                          size="small" 
                          onClick={() => setNewBookCoverFile(null)} 
                          color="error"
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Box>
                    )}
                  </Box>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions sx={{ flexDirection: 'column', alignItems: 'stretch', padding: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%' }}>
            <Button 
              onClick={() => setOpenAddDialog(false)}
              disabled={addBookLoading || uploadingNewBookCover}
              sx={{ mr: 1 }}
            >
              –ë–∞—Å —Ç–∞—Ä—Ç—É
            </Button>
            <Button 
              onClick={handleAddBook} 
              variant="contained" 
              color="primary"
              disabled={addBookLoading || uploadingNewBookCover}
              startIcon={addBookLoading || uploadingNewBookCover ? <CircularProgress size={20} /> : null}
            >
              {addBookLoading || uploadingNewBookCover ? '–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...' : '–ö—ñ—Ç–∞–ø “õ–æ—Å—É'}
            </Button>
          </Box>
        </DialogActions>
      </Dialog>

      {/* –ö—ñ—Ç–∞–ø—Ç—ã ”©“£–¥–µ—É –¥–∏–∞–ª–æ–≥—ã */}
      <Dialog open={openEditDialog} onClose={() => !editBookLoading && setOpenEditDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>–ö—ñ—Ç–∞–ø—Ç—ã ”©“£–¥–µ—É</DialogTitle>
        <DialogContent>
          {formError && (
            <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
              <AlertTitle>–ö—ñ—Ç–∞–ø—Ç—ã ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ</AlertTitle>
              {formError}
            </Alert>
          )}
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ê—Ç–∞—É—ã"
                name="title"
                value={formData.title}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.title}
                helperText={fieldErrors.title || ''}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ê–≤—Ç–æ—Ä—ã"
                name="author"
                value={formData.author}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.author}
                helperText={fieldErrors.author || ''}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="–°–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã"
                name="description"
                value={formData.description}
                onChange={handleFormChange}
                multiline
                rows={3}
                required
                error={!!fieldErrors.description}
                helperText={fieldErrors.description || '–ö—ñ—Ç–∞–ø—Ç—ã“£ “õ—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑'}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ë–∞—Å–ø–∞"
                name="publisher"
                value={formData.publisher}
                onChange={handleFormChange}
                error={!!fieldErrors.publisher}
                helperText={fieldErrors.publisher || '–ö—ñ—Ç–∞–ø –±–∞—Å–ø–∞—Å—ã (–º—ñ–Ω–¥–µ—Ç—Ç—ñ –µ–º–µ—Å)'}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ë–∞—Å—ã–ª—ã–º –∂—ã–ª—ã"
                name="publishYear"
                type="text"
                value={formData.publishYear}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.publishYear}
                helperText={fieldErrors.publishYear || '–ú—ã—Å–∞–ª—ã: 2023 (—Ç–µ–∫ —Å–∞–Ω–¥–∞—Ä–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑)'}
                inputProps={{
                  inputMode: 'numeric',
                  pattern: '[0-9]*',
                }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth error={!!fieldErrors.categoryId}>
                <InputLabel id="category-select-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</InputLabel>
                <Select
                  labelId="category-select-label"
                  label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                  name="categoryId"
                  value={formData.categoryId}
                  onChange={handleFormChange}
                  required
                >
                  {categories.map(category => (
                    <MenuItem key={category.id} value={category.id}>
                      {category.name}
                    </MenuItem>
                  ))}
                </Select>
                {fieldErrors.categoryId && (
                  <Typography color="error" variant="caption" sx={{ mt: 1, ml: 2 }}>
                    {fieldErrors.categoryId}
                  </Typography>
                )}
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth error={!!fieldErrors.language}>
                <InputLabel id="language-edit-select-label">–¢—ñ–ª—ñ</InputLabel>
                <Select
                  labelId="language-edit-select-label"
                  label="–¢—ñ–ª—ñ"
                  name="language"
                  value={formData.language}
                  onChange={handleFormChange}
                  required
                >
                  <MenuItem value="–ö–∞–∑–∞—Ö—Å–∫–∏–π">“ö–∞–∑–∞“õ—à–∞</MenuItem>
                  <MenuItem value="–†—É—Å—Å–∫–∏–π">–û—Ä—ã—Å—à–∞</MenuItem>
                  <MenuItem value="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π">–ê“ì—ã–ª—à—ã–Ω—à–∞</MenuItem>
                </Select>
                {fieldErrors.language && (
                  <Typography color="error" variant="caption" sx={{ mt: 1, ml: 2 }}>
                    {fieldErrors.language}
                  </Typography>
                )}
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                label="–ë–∞—Ä–ª—ã“õ –¥–∞–Ω–∞–ª–∞—Ä—ã"
                name="totalCopies"
                type="text"
                value={formData.totalCopies}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.totalCopies}
                helperText={fieldErrors.totalCopies || '–ö—ñ—Ç–∞–ø—Ç—ã“£ –∂–∞–ª–ø—ã –¥–∞–Ω–∞—Å—ã (—Ç–µ–∫ —Å–∞–Ω–¥–∞—Ä)'}
                inputProps={{
                  inputMode: 'numeric',
                  pattern: '[0-9]*',
                  min: "0"
                }}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                label="“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä—ã"
                name="availableCopies"
                type="text"
                value={formData.availableCopies}
                onChange={handleFormChange}
                required
                error={!!fieldErrors.availableCopies}
                helperText={fieldErrors.availableCopies || '“ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –¥–∞–Ω–∞–ª–∞—Ä (—Ç–µ–∫ —Å–∞–Ω–¥–∞—Ä)'}
                inputProps={{
                  inputMode: 'numeric',
                  pattern: '[0-9]*',
                  min: "0"
                }}
              />
            </Grid>
            
            {/* –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 'bold' }}>
                –ö—ñ—Ç–∞–ø –º“±“õ–∞–±–∞—Å—ã
              </Typography>
              
              {editBookCoverError && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {editBookCoverError}
                </Alert>
              )}
              
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={4}>
                  <BookCoverPreview 
                    file={editBookCoverFile} 
                    imageUrl={selectedBook?.coverUrl} 
                    title={formData.title || selectedBook?.title || '–ö—ñ—Ç–∞–ø'}
                  />
                </Grid>
                
                <Grid item xs={12} sm={8}>
                  <Box sx={{ mb: 3 }}>
                    <Typography variant="body2" gutterBottom>
                      –ö—ñ—Ç–∞–ø –º“±“õ–∞–±–∞—Å—ã–Ω ”©–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω –∂–∞“£–∞ —Å—É—Ä–µ—Ç –∂“Ø–∫—Ç–µ“£—ñ–∑. ”®–∑–≥–µ—Ä—Ç–ø–µ—É “Ø—à—ñ–Ω –±–æ—Å “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑.
                    </Typography>
                    
                    <input
                      accept="image/*"
                      id="edit-book-cover-upload"
                      type="file"
                      onChange={handleEditBookCoverChange}
                      style={{ display: 'none' }}
                    />
                    <label htmlFor="edit-book-cover-upload">
                      <Button
                        variant="outlined"
                        component="span"
                        startIcon={<ImageIcon />}
                        disabled={editBookLoading}
                        fullWidth
                        sx={{ mt: 1 }}
                      >
                        –ñ–∞“£–∞ –º“±“õ–∞–±–∞ —Ç–∞“£–¥–∞—É
                      </Button>
                    </label>
                    
                    {editBookCoverFile && (
                      <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <Typography variant="caption">
                          {editBookCoverFile.name} ({(editBookCoverFile.size / 1024).toFixed(2)} KB)
                        </Typography>
                        <IconButton 
                          size="small" 
                          onClick={() => setEditBookCoverFile(null)} 
                          color="error"
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Box>
                    )}
                  </Box>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => setOpenEditDialog(false)}
            disabled={editBookLoading || uploadingEditBookCover}
          >
            –ë–∞—Å —Ç–∞—Ä—Ç—É
          </Button>
          <Button 
            onClick={handleEditBook} 
            variant="contained" 
            color="primary"
            disabled={editBookLoading || uploadingEditBookCover}
          >
            {(editBookLoading || uploadingEditBookCover) ? <CircularProgress size={24} /> : '–°–∞“õ—Ç–∞—É'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ö—ñ—Ç–∞–ø—Ç—ã –∂–æ—é –¥–∏–∞–ª–æ–≥—ã */}
      <Dialog
        open={openDeleteDialog}
        onClose={() => !deleteBookLoading && setOpenDeleteDialog(false)}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">–ñ–æ—é–¥—ã —Ä–∞—Å—Ç–∞—É</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            "{selectedBook?.title}" –∫—ñ—Ç–∞–±—ã–Ω –∂–æ—é“ì–∞ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ –±–æ–ª–¥—ã—Ä–º–∞—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => setOpenDeleteDialog(false)}
            disabled={deleteBookLoading}
          >
            –ë–∞—Å —Ç–∞—Ä—Ç—É
          </Button>
          <Button 
            onClick={handleDeleteBook} 
            color="error" 
            autoFocus
            disabled={deleteBookLoading}
          >
            {deleteBookLoading ? <CircularProgress size={24} /> : '–ñ–æ—é'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú“±“õ–∞–±–∞ –∂“Ø–∫—Ç–µ—É –¥–∏–∞–ª–æ–≥—ã */}
      {renderCoverDialog()}
    </Container>
  );
};

export default BooksPage;