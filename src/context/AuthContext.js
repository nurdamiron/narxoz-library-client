import React, { createContext, useState, useContext, useEffect } from 'react';
import { authService } from '../services';
import { normalizeRole } from '../debug-role';

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const AuthContext = createContext();

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * @param {Object} props - –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {ReactNode} props.children - –î–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */
export const AuthProvider = ({ children }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [user, setUser] = useState(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [loading, setLoading] = useState(true);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  const [error, setError] = useState(null);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  const clearError = () => setError(null);

  /**
   * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @param {Object} credentials - –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} credentials.email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} credentials.password - –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {boolean} credentials.rememberMe - –§–ª–∞–≥ "–∑–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
   */
  const login = async (credentials) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await authService.login(credentials);
      
      if (response.success) {
        // Ensure role is normalized to lowercase for consistent comparison
        const userData = {
          ...response.data,
          role: normalizeRole(response.data.role)
        };
        
        // Print user data for debugging
        console.log('Login response received:', {
          originalRole: response.data.role,
          normalizedRole: userData.role,
          name: userData.firstName
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ä–æ–ª—å—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if (userData.role === 'moderator') {
          console.log('%cüë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É', 'background: #4caf50; color: white; padding: 4px 8px; border-radius: 4px;');
          console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ:', userData.role);
        } else if (response.data.role && response.data.role.toLowerCase() === 'moderator') {
          console.warn('%c‚ö†Ô∏è –†–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –Ω–æ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º!', 'background: #ff9800; color: white; padding: 4px 8px; border-radius: 4px;');
          console.warn('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–æ–ª—å:', response.data.role);
          console.warn('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ä–æ–ª—å:', userData.role);
        }
        
        // Extra logging for moderator role normalization
        if (response.data.role && response.data.role.toLowerCase() === 'moderator') {
          console.info('Moderator login detected:', {
            originalRole: response.data.role,
            normalizedRole: userData.role,
            isNormalized: response.data.role === userData.role
          });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ JWT)
        setUser(userData);
        setIsAuthenticated(true);
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        localStorage.setItem('userData', JSON.stringify(userData));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        sessionStorage.setItem('email', credentials.email);
        sessionStorage.setItem('userPassword', credentials.password);
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ "–∑–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (credentials.rememberMe) {
          localStorage.setItem('email', credentials.email);
          localStorage.setItem('userPassword', credentials.password);
        }
      }
      
      return response;
    } catch (err) {
      console.error('Login error:', err);
      setError(err.message || '–ñ“Ø–π–µ–≥–µ –∫—ñ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  /**
   * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const logout = () => {
    // –£–¥–∞–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
    sessionStorage.removeItem('email');
    sessionStorage.removeItem('userPassword');
    localStorage.removeItem('email');
    localStorage.removeItem('userPassword');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    setUser(null);
    setIsAuthenticated(false);
  };

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const updateUserData = async () => {
    try {
      setLoading(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const email = sessionStorage.getItem('email') || localStorage.getItem('email');
      const password = sessionStorage.getItem('userPassword') || localStorage.getItem('userPassword');
      
      if (!email || !password) {
        setLoading(false);
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await authService.getCurrentUser({ email, password });
      
      if (response.success) {
        // Ensure role is normalized to lowercase for consistent comparison
        const userData = {
          ...response.data,
          role: normalizeRole(response.data.role)
        };
        
        setUser(userData);
        setIsAuthenticated(true);
      } else {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        logout();
      }
    } catch (err) {
      console.error('Error updating user data:', err);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      logout();
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const initAuth = async () => {
      const email = sessionStorage.getItem('email') || localStorage.getItem('email');
      const password = sessionStorage.getItem('userPassword') || localStorage.getItem('userPassword');
      
      if (email && password) {
        // –ï—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          setLoading(true);
          const response = await authService.getCurrentUser({ email, password });
          
          if (response.success) {
            // Ensure role is normalized to lowercase for consistent comparison
            const userData = {
              ...response.data,
              role: normalizeRole(response.data.role)
            };
            
            // Log user data for debugging
            console.log('User data loaded on init:', {
              originalRole: response.data.role,
              normalizedRole: userData.role,
              name: userData.firstName
            });
            
            // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setUser(userData);
            setIsAuthenticated(true);
          } else {
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            logout();
          }
        } catch (err) {
          console.error('Authentication error:', err);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
          logout();
        } finally {
          setLoading(false);
        }
      } else {
        // –ï—Å–ª–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        setLoading(false);
      }
    };
    
    initAuth();
  }, []);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const value = {
    user,
    isAuthenticated,
    loading,
    error,
    login,
    logout,
    updateUserData,
    clearError,
    setUser
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const useAuth = () => {
  return useContext(AuthContext);
};

export default AuthContext;